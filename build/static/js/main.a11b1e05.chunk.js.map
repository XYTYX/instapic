{"version":3,"sources":["api/client.tsx","api/index.tsx","components/newPostModal.tsx","components/feed.tsx","components/explore.tsx","components/exploreByUsers.tsx","App.tsx","components/singleUserFeed.tsx","serviceWorker.ts","index.tsx"],"names":["HttpClient","authToken","_authToken","this","path","formData","doFetch","method","body","headers","JSON","stringify","queryParams","pathAndQuery","encodeQueryParams","Authorization","Object","keys","map","k","encodeURIComponent","join","url","init","rest","finalHeaders","fetch","response","status","BadRequestError","UnauthorizedError","NotFoundError","ConflictError","InternalServerError","Error","ApiImpl","client","_client","doGet","result","json","userPublicId","doPostJson","file","text","FormData","append","doPostFormData","email","password","LoginFailedError","DownstreamError","username","UserAlreadyExistsError","sortBy","sort_by","NewPostModal","props","useState","fileList","setFileList","confirmLoading","setConfirmLoading","useForm","form","title","visible","onCancel","hideModal","okText","okButtonProps","disabled","length","onOk","validateFields","then","values","a","fileContainer","api","newPost","originFileObj","getPosts","SortBy","MOST_RECENT","destroyOnClose","preserve","name","label","extra","customRequest","onSuccess","setTimeout","onChange","info","newFileList","listType","beforeUpload","includes","type","message","error","icon","UploadOutlined","required","Feed","className","posts","it","index","key","src","images","full_src","alt","style","marginTop","undefined","Explore","sortMethod","setSortMethod","useEffect","marginBottom","dropdownMenu","onClick","BY_USERS","Item","overlay","trigger","DownOutlined","ExploreByUsers","renderPosts","users","setUsers","getAllUsers","user","usersPosts","filter","post","user_public_id","public_id","possibleThumbnail","SingleUserFeed","showModal","setShowModal","ExpandAltOutlined","footer","App","customHistory","createBrowserHistory","history","HistoryAwareApp","setPosts","cookies","Cookies","cookieJWT","get","setAuthToken","httpClient","useRef","current","visibleModal","setVisibleModal","logout","remove","setClient","to","Login","Signup","login","d1","Date","d2","setMinutes","getMinutes","set","authorization","expires","onFinish","rules","Password","signup","min","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a11b1e05.chunk.js","sourcesContent":["export default class HttpClient {\n  constructor(authToken: string) {\n    this._authToken = authToken;\n  }\n\n  setAuthToken(authToken: string) {\n    this._authToken = authToken;\n  }\n\n  async doPostFormData(path: string, formData: FormData) {\n    return this.doFetch(path, {\n      method: \"POST\",\n      body: formData,\n    });\n  }\n\n  async doPostJson(path: string, body: Object) {\n    return this.doFetch(path, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n      body: JSON.stringify(body),\n    });\n  }\n\n  async doGet(path: string, queryParams: QueryParams | null) {\n    const pathAndQuery =\n      queryParams === null\n        ? path\n        : path + \"?\" + this.encodeQueryParams(queryParams);\n\n    return this.doFetch(pathAndQuery, {\n      headers: {\n        Authorization: this._authToken,\n      },\n    });\n  }\n\n  private encodeQueryParams(queryParams: QueryParams): string {\n    return Object.keys(queryParams)\n      .map(\n        (k) =>\n          `${encodeURIComponent(k)}=${encodeURIComponent(queryParams[k]!!)}`\n      )\n      .join(\"&\");\n  }\n\n  private async doFetch(url: string, init: RequestInit): Promise<Response> {\n    let { headers, ...rest } = init;\n    let finalHeaders = { ...headers };\n\n    if (this._authToken) {\n      finalHeaders = { ...headers, Authorization: `Bearer ${this._authToken}` };\n    }\n\n    let response: Response;\n    try {\n      response = await fetch(\"/api\" + url, { ...rest, headers: finalHeaders });\n    } catch (e) {\n      throw e;\n    }\n\n    if (response.status === 400) {\n      throw new BadRequestError();\n    } else if (response.status === 401) {\n      throw new UnauthorizedError();\n    } else if (response.status === 404) {\n      throw new NotFoundError();\n    } else if (response.status === 409) {\n      throw new ConflictError();\n    } else if (response.status === 500) {\n      throw new InternalServerError();\n    }\n\n    return response;\n  }\n\n  private _authToken: string;\n}\n\ninterface QueryParams {\n  [key: string]: string;\n}\n\nexport class BadRequestError extends Error {}\nexport class ConflictError extends Error {}\nexport class UnauthorizedError extends Error {}\nexport class NotFoundError extends Error {}\nexport class InternalServerError extends Error {}\n","import HttpClient, {\n  ConflictError,\n  InternalServerError,\n  UnauthorizedError,\n} from \"./client\";\nimport { AuthToken, Post, User } from \"../models\";\nimport { SortBy } from \"../App\";\n\nexport interface Api {\n  login(email: string, password: string): Promise<AuthToken>;\n  signup(email: string, username: string, password: string): Promise<AuthToken>;\n  logout(): Promise<void>;\n  getPosts(sortBy: SortBy): Promise<Array<Post>>;\n  newPost(file: File | Blob, text: string): Promise<Post>;\n  getUser(publicId: string): Promise<User>;\n  getPostsByUser(userPublicId: string): Promise<Array<Post>>;\n  getAllUsers(): Promise<Array<User>>;\n}\n\nexport class ApiImpl implements Api {\n  constructor(client: HttpClient) {\n    this._client = client;\n  }\n\n  setClient(client: HttpClient) {\n    this._client = client;\n  }\n\n  async getAllUsers(): Promise<Array<User>> {\n    const path = `/v1/user`;\n    let result: Response;\n\n    try {\n      result = await this._client.doGet(path, null);\n    } catch (e) {\n      throw e;\n    }\n\n    return result.json()!!;\n  }\n\n  async getPostsByUser(userPublicId: string): Promise<Array<Post>> {\n    const path = `/v1/post/${userPublicId}`;\n    let result: Response;\n\n    try {\n      result = await this._client.doGet(path, null);\n    } catch (e) {\n      throw e;\n    }\n\n    return result.json()!!;\n  }\n\n  async getUser(userPublicId: string): Promise<User> {\n    const path = `/v1/user/${userPublicId}`;\n    let result: Response;\n\n    try {\n      result = await this._client.doGet(path, null);\n    } catch (e) {\n      throw e;\n    }\n    return result.json()!!;\n  }\n\n  async logout(): Promise<void> {\n    const path = \"/v1/auth/logout\";\n\n    try {\n      await this._client.doPostJson(path, {});\n    } catch (e) {\n      throw e;\n    }\n    return;\n  }\n\n  async newPost(file: File | Blob, text: string): Promise<Post> {\n    const path = \"/v1/post\";\n    let result: Response;\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"text\", text);\n    try {\n      result = await this._client.doPostFormData(path, formData);\n    } catch (e) {\n      throw e;\n    }\n    return result.json()!!;\n  }\n\n  async login(email: string, password: string): Promise<AuthToken> {\n    const url = \"/v1/auth/login\";\n    let result: Response;\n    try {\n      result = await this._client.doPostJson(url, {\n        email: email,\n        password: password,\n      });\n      return result.json()!!;\n    } catch (e) {\n      if (e instanceof UnauthorizedError) {\n        throw new LoginFailedError();\n      }\n      if (e instanceof InternalServerError) {\n        throw new DownstreamError();\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  async signup(\n    email: string,\n    username: string,\n    password: string\n  ): Promise<AuthToken> {\n    const url = \"/v1/user\";\n    let result: Response;\n    try {\n      result = await this._client.doPostJson(url, {\n        email: email,\n        username: username,\n        password: password,\n      });\n      return result.json()!!;\n    } catch (e) {\n      if (e instanceof ConflictError) {\n        throw new UserAlreadyExistsError();\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  async getPosts(sortBy: SortBy): Promise<Array<Post>> {\n    let result: Response;\n\n    const queryParams = {\n      sort_by: sortBy,\n    };\n\n    try {\n      result = await this._client.doGet(\"/v1/post\", queryParams);\n      return result.json();\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  private _client: HttpClient;\n}\n\nexport class LoginFailedError extends Error {}\nexport class DownstreamError extends Error {}\nexport class UserAlreadyExistsError extends Error {}\n","import { UploadOutlined } from \"@ant-design/icons\";\nimport { Button, Input, message, Modal } from \"antd\";\nimport Form, { useForm } from \"antd/lib/form/Form\";\nimport FormItem from \"antd/lib/form/FormItem\";\nimport { Store } from \"antd/lib/form/interface\";\nimport Upload, { UploadChangeParam } from \"antd/lib/upload\";\nimport { UploadFile } from \"antd/lib/upload/interface\";\nimport React, { useState } from \"react\";\nimport { Api } from \"../api\";\nimport { SortBy } from \"../App\";\n\ninterface NewPostProps {\n  api: Api;\n  visible: boolean;\n  hideModal(): void;\n  getPosts(sortBy: SortBy): void;\n}\n\nexport function NewPostModal(props: NewPostProps) {\n  const [fileList, setFileList] = useState<Array<UploadFile>>([]);\n  const [confirmLoading, setConfirmLoading] = useState<boolean>(false);\n  const [form] = useForm();\n\n  function onSubmit() {\n    form.validateFields().then(async (values: Store) => {\n      const fileContainer: UploadChangeParam = values.file;\n      const text: string = values.text;\n      let result;\n      setConfirmLoading(true);\n      try {\n        result = await props.api.newPost(\n          fileContainer.file.originFileObj!!,\n          text ? text : \"\"\n        );\n      } catch (e) {}\n      setConfirmLoading(false);\n      props.hideModal();\n      try {\n        await props.getPosts(SortBy.MOST_RECENT);\n      } catch (e) {}\n    });\n  }\n\n  function onChange(info: UploadChangeParam) {\n    let newFileList: Array<UploadFile> = [];\n    switch (info.file.status) {\n      case \"uploading\":\n        newFileList = [info.file];\n        break;\n      case \"done\":\n        newFileList = [info.file];\n        break;\n      default:\n        newFileList = [];\n    }\n    setFileList(newFileList);\n  }\n\n  function dummyRequest({ onSuccess }: any) {\n    setTimeout(() => {\n      onSuccess(\"ok\");\n    }, 0);\n  }\n\n  function validateFiletype(file: UploadFile) {\n    const acceptedFileTypes = [\n      \"image/png\",\n      \"image/jpg\",\n      \"image/jpeg\",\n      \"image/gif\",\n    ];\n\n    if (!acceptedFileTypes.includes(file.type)) {\n      message.error(`${file.name} is not in a file format that we support`);\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  return (\n    <Modal\n      title=\"New Post\"\n      visible={props.visible}\n      onCancel={props.hideModal}\n      okText=\"Submit\"\n      okButtonProps={{ disabled: fileList.length === 0 }}\n      onOk={onSubmit}\n      confirmLoading={confirmLoading}\n      destroyOnClose\n    >\n      <Form form={form} preserve={false} name=\"validate_other\">\n        <FormItem\n          name=\"file\"\n          label=\"Image\"\n          extra=\"Please upload a .png, .jpg, .jpeg, or .gif image\"\n        >\n          <Upload\n            customRequest={dummyRequest}\n            onChange={onChange}\n            fileList={fileList}\n            name=\"logo\"\n            listType=\"picture\"\n            beforeUpload={validateFiletype}\n          >\n            <Button icon={<UploadOutlined />}>Click to upload</Button>\n          </Upload>\n        </FormItem>\n        <FormItem name=\"text\" label=\"Subtitle\">\n          <Input required />\n        </FormItem>\n      </Form>\n    </Modal>\n  );\n}\n","import { Card, Image } from \"antd\";\nimport Meta from \"antd/lib/card/Meta\";\nimport React from \"react\";\nimport { Post } from \"../models\";\n\ninterface FeedProps {\n  posts: Array<Post>;\n}\n\nexport function Feed(props: FeedProps) {\n  return (\n    <div className=\"feed\">\n      {props.posts.map((it, index) => (\n        <Card className=\"card\" key={index}>\n          <Image className=\"image\" src={it.images[0].full_src} alt=\"image\" />\n          <Meta\n            style={{ marginTop: \"16px\" }}\n            title={it.text !== undefined ? it.text : \"\"}\n          />\n        </Card>\n      ))}\n    </div>\n  );\n}\n","import { DownOutlined } from \"@ant-design/icons\";\nimport { Button, Dropdown, Menu } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { Api } from \"../api\";\nimport { SortBy } from \"../App\";\nimport { Post } from \"../models\";\nimport { MenuInfo } from \"rc-menu/lib/interface\";\nimport { Feed } from \"./feed\";\nimport { ExploreByUsers } from \".\";\n\ninterface ExploreProps {\n  api: Api;\n  posts: Array<Post>;\n  getPosts(sortBy: SortBy): void;\n}\n\nexport function Explore(props: ExploreProps) {\n  const [sortMethod, setSortMethod] = useState<SortBy>(SortBy.MOST_RECENT);\n\n  useEffect(() => {\n    props.getPosts(sortMethod);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sortMethod]);\n\n  function renderPosts(posts: Array<Post> | null): React.ReactNode {\n    if (posts === null || posts.length === 0) {\n      return;\n    }\n\n    function onSortMethodClick({ key }: MenuInfo) {\n      if (key === SortBy.MOST_RECENT) {\n        setSortMethod(SortBy.MOST_RECENT);\n      } else {\n        setSortMethod(SortBy.BY_USERS);\n      }\n    }\n\n    const dropdownMenu = (\n      <Menu onClick={onSortMethodClick}>\n        <Menu.Item key={SortBy.MOST_RECENT}>Most Recent</Menu.Item>\n        <Menu.Item key={SortBy.BY_USERS}>By User</Menu.Item>\n      </Menu>\n    );\n\n    return (\n      <>\n        <Dropdown overlay={dropdownMenu} trigger={[\"click\"]}>\n          <Button type=\"text\">\n            Sort By <DownOutlined />\n          </Button>\n        </Dropdown>\n        {sortMethod === SortBy.MOST_RECENT ? (\n          <Feed posts={posts} />\n        ) : (\n          <ExploreByUsers api={props.api} posts={posts} />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"spaced\">\n      <h2 style={{ marginBottom: 0 }}>Explore</h2>\n      {renderPosts(props.posts)}\n    </div>\n  );\n}\n","import { Card, Image } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { SingleUserFeed } from \".\";\nimport { Api } from \"../api\";\nimport { Post, User } from \"../models\";\n\ninterface ExploreByUsersProps {\n  api: Api;\n  posts: Array<Post>;\n}\n\nexport function ExploreByUsers(props: ExploreByUsersProps) {\n  const [users, setUsers] = useState<Array<User>>([]);\n\n  useEffect(() => {\n    (async () => {\n      const response = await props.api.getAllUsers();\n      setUsers(response);\n    })();\n  }, [props.api, props.posts]);\n\n  return (\n    <div className=\"rowFeed\">\n      {users.map((user, index) => {\n        const usersPosts = props.posts.filter((post) => {\n          return post.user_public_id === user.public_id;\n        });\n        const possibleThumbnail = usersPosts[0]?.images[0]?.full_src;\n        return (\n          <Card className=\"rowCard\" key={index}>\n            <Image\n              className=\"image\"\n              src={\n                possibleThumbnail\n                  ? possibleThumbnail\n                  : \"http://i2.wp.com/juju.com.hk/wp-content/uploads/2019/11/placeholder.png\"\n              }\n              alt=\"image\"\n            />\n            <SingleUserFeed\n              username={user.username}\n              index={0}\n              posts={usersPosts}\n            />\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","import { createBrowserHistory } from \"history\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Redirect, Route, Router, Switch } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { Input, Form, Button, message } from \"antd\";\nimport {\n  Api,\n  ApiImpl,\n  DownstreamError,\n  LoginFailedError,\n  UserAlreadyExistsError,\n} from \"./api\";\nimport { AuthToken, Post } from \"./models\";\nimport HttpClient from \"./api/client\";\nimport { Cookies } from \"react-cookie\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport { NewPostModal, Explore } from \"./components\";\n\nexport default function App() {\n  const customHistory = createBrowserHistory();\n\n  return (\n    <div className=\"App\">\n      <Router history={customHistory}>\n        <HistoryAwareApp />\n      </Router>\n    </div>\n  );\n}\n\nexport enum SortBy {\n  MOST_RECENT = \"most_recent\",\n  BY_USERS = \"by_users\",\n}\n\nfunction HistoryAwareApp() {\n  const [posts, setPosts] = useState<Array<Post>>([]);\n  const cookies = new Cookies();\n  const cookieJWT = cookies.get(\"instapic_jwt\");\n  const [authToken, setAuthToken] = useState<string>(\n    cookieJWT ? cookieJWT : \"\"\n  );\n  let httpClient = useRef(new HttpClient(authToken));\n  let api = useRef(new ApiImpl(httpClient.current));\n\n  const [visibleModal, setVisibleModal] = useState<boolean>(false);\n\n  function showModal() {\n    setVisibleModal(true);\n  }\n\n  function hideModal() {\n    setVisibleModal(false);\n  }\n\n  async function getPosts(sortBy: SortBy) {\n    let posts: Array<Post>;\n    posts = await api.current.getPosts(sortBy);\n    setPosts(posts);\n  }\n\n  async function logout() {\n    await api.current.logout();\n    cookies.remove(\"instapic_jwt\");\n    setAuthToken(\"\");\n  }\n\n  useEffect(() => {\n    httpClient.current.setAuthToken(authToken);\n    api.current.setClient(httpClient.current);\n  }, [authToken]);\n\n  return (\n    <div className=\"App\">\n      <p className=\"spaced\"></p>\n      <nav>\n        {!authToken && (\n          <>\n            <Link to=\"/login\">\n              <Button>Log In</Button>\n            </Link>\n            <Link to=\"/signup\">\n              <Button>Signup</Button>\n            </Link>\n          </>\n        )}\n        {authToken && (\n          <>\n            <Link to=\"/explore\">\n              <Button>Explore</Button>\n            </Link>\n            <Link to=\"new_post\">\n              <Button onClick={showModal}>New Post</Button>\n              <NewPostModal\n                getPosts={getPosts}\n                hideModal={hideModal}\n                visible={visibleModal}\n                api={api.current}\n              />\n            </Link>\n            <Button onClick={logout}>Log Out</Button>\n          </>\n        )}\n      </nav>\n      <Switch>\n        <Route path=\"/login\">\n          {authToken ? (\n            <Redirect to=\"/\" />\n          ) : (\n            <Login api={api.current} setAuthToken={setAuthToken} />\n          )}\n        </Route>\n        <Route path=\"/signup\">\n          {authToken ? (\n            <Redirect to=\"/\" />\n          ) : (\n            <Signup api={api.current} setAuthToken={setAuthToken} />\n          )}\n        </Route>\n        <Route path=\"/explore\">\n          {!authToken ? (\n            <Redirect to=\"login\" />\n          ) : (\n            <Explore posts={posts} getPosts={getPosts} api={api.current} />\n          )}\n        </Route>\n        <Route path=\"/\">\n          {!authToken ? (\n            <Redirect to=\"login\" />\n          ) : (\n            <Explore posts={posts} getPosts={getPosts} api={api.current} />\n          )}\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\ninterface LoginProps {\n  api: Api;\n  setAuthToken(authToken: string): void;\n}\n\nfunction Login(props: LoginProps) {\n  async function onSubmit({ email, password }: any) {\n    let response: AuthToken;\n    try {\n      response = await props.api.login(email, password);\n      const cookies = new Cookies();\n      const d1 = new Date();\n      const d2 = new Date();\n      d2.setMinutes(d1.getMinutes() + 15);\n      cookies.set(\"instapic_jwt\", response.authorization, { expires: d2 });\n      props.setAuthToken(response.authorization);\n    } catch (e) {\n      if (e instanceof LoginFailedError) {\n        message.error(\n          \"Login unsuccessful, check your email and password. Did you mean to sign up?\"\n        );\n      } else if (e instanceof DownstreamError) {\n        message.error(\n          \"Our systems seem to be experiencing issues, please try again later\"\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return (\n    <div className=\"authForm\">\n      <h2 className=\"spaced\">Log In</h2>\n      <Form onFinish={onSubmit}>\n        <Form.Item\n          required\n          label=\"Email\"\n          name=\"email\"\n          rules={[\n            { required: true, message: \"Please enter an email\" },\n            { type: \"email\" },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          required\n          label=\"Password\"\n          name=\"password\"\n          rules={[{ required: true, message: \"Please enter a password\" }]}\n        >\n          <Input.Password />\n        </Form.Item>\n        <button>Log In</button>\n      </Form>\n    </div>\n  );\n}\n\ninterface SignupProps {\n  api: Api;\n  setAuthToken(authToken: string): void;\n}\n\nfunction Signup(props: SignupProps) {\n  async function onSubmit({ email, username, password }: any) {\n    let response: AuthToken;\n    try {\n      response = await props.api.signup(email, username, password);\n      props.setAuthToken(response?.authorization);\n    } catch (e) {\n      if (e instanceof UserAlreadyExistsError) {\n        message.error(\n          \"That email or username already exists, did you mean to log in?\"\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return (\n    <div className=\"authForm\">\n      <h2 className=\"spaced\">Sign Up</h2>\n      <Form onFinish={onSubmit}>\n        <Form.Item\n          required\n          label=\"Email\"\n          name=\"email\"\n          rules={[\n            { required: true, message: \"Please enter an email\" },\n            { type: \"email\" },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          required\n          label=\"Username\"\n          name=\"username\"\n          rules={[{ required: true, message: \"Please enter a username\" }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          required\n          label=\"Password\"\n          name=\"password\"\n          rules={[\n            { required: true, message: \"Please enter a password\" },\n            {\n              min: 8,\n              message:\n                \"Make sure your password is at least 8 characters in length\",\n            },\n          ]}\n        >\n          <Input.Password />\n        </Form.Item>\n        <button>Sign Up</button>\n      </Form>\n    </div>\n  );\n}\n","import { ExpandAltOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport React, { useState } from \"react\";\nimport { Feed } from \".\";\nimport { Post } from \"../models\";\n\ninterface SingleUserFeed {\n  username: string;\n  index: number;\n  posts: Array<Post>;\n}\n\nexport function SingleUserFeed(props: SingleUserFeed) {\n  const [showModal, setShowModal] = useState<boolean>(false);\n\n  function _showModal() {\n    setShowModal(true);\n  }\n\n  function hideModal() {\n    setShowModal(false);\n  }\n\n  function okButton() {\n    return (\n      <Button type=\"primary\" onClick={hideModal}>\n        Close\n      </Button>\n    );\n  }\n\n  return (\n    <>\n      <Button style={{ marginTop: \"10px\" }} type=\"link\" onClick={_showModal}>\n        {props.username}\n        <ExpandAltOutlined />\n      </Button>\n      <Modal\n        footer={okButton()}\n        visible={showModal}\n        onOk={hideModal}\n        onCancel={hideModal}\n      >\n        {props.posts.length !== 0 ? (\n          <Feed posts={props.posts} />\n        ) : (\n          <div>This user hasn't uploaded any photos yet!</div>\n        )}\n      </Modal>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}