{"version":3,"sources":["components/explore.tsx","api/client.tsx","api/index.tsx","components/feed.tsx","components/newPostModal.tsx","components/exploreByUsers.tsx","components/singleUserFeed.tsx","components/login.tsx","components/signup.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SortBy","HttpClient","authToken","_authToken","this","path","formData","doFetch","method","body","headers","JSON","stringify","queryParams","pathAndQuery","encodeQueryParams","Authorization","Object","keys","map","k","encodeURIComponent","join","url","init","rest","finalHeaders","fetch","response","status","BadRequestError","UnauthorizedError","NotFoundError","ConflictError","InternalServerError","Error","ApiImpl","client","_client","doGet","result","json","userPublicId","doPostJson","file","text","FormData","append","doPostFormData","email","password","LoginFailedError","DownstreamError","username","UserAlreadyExistsError","sortBy","offset","limit","sort_by","String","Feed","props","className","posts","it","key","uuidv4","src","images","full_src","alt","style","marginTop","title","undefined","Explore","useState","MOST_RECENT","sortMethod","setSortMethod","setOffset","setLimit","useEffect","getPosts","marginBottom","length","dropdownMenu","onClick","setInherit","BY_USERS","Item","overlay","trigger","type","DownOutlined","slice","onChange","pageNumber","pageSize","actualPageSize","defaultCurrent","total","ExploreByUsers","api","renderPosts","NewPostModal","fileList","setFileList","confirmLoading","setConfirmLoading","useForm","form","visible","onCancel","hideModal","okText","okButtonProps","disabled","onOk","validateFields","then","values","a","fileContainer","newPost","originFileObj","destroyOnClose","preserve","name","label","extra","customRequest","onSuccess","setTimeout","info","newFileList","listType","beforeUpload","includes","message","error","icon","UploadOutlined","required","users","setUsers","getAllUsers","sort","first","second","t1","created_on","split","Number","t2","d1","Date","UTC","d2","user","index","usersPosts","filter","post","user_public_id","public_id","possibleThumbnail","SingleUserFeed","showModal","setShowModal","ExpandAltOutlined","footer","Login","login","cookies","Cookies","setMinutes","getMinutes","set","authorization","expires","setAuthToken","onFinish","rules","Password","Signup","signup","min","App","customHistory","createBrowserHistory","history","HistoryAwareApp","setPosts","visibleModal","setVisibleModal","inherit","cookieJWT","get","httpClient","useRef","current","logout","remove","setClient","height","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.2fc47b0c.chunk.js","sourcesContent":["import { DownOutlined } from \"@ant-design/icons\";\nimport { Button, Dropdown, Menu, Pagination } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { Api } from \"../api\";\nimport { Post } from \"../models\";\nimport { MenuInfo } from \"rc-menu/lib/interface\";\nimport { Feed } from \"./feed\";\nimport { ExploreByUsers } from \".\";\n\nexport enum SortBy {\n  MOST_RECENT = \"most_recent\",\n  BY_USERS = \"by_users\",\n}\n\ninterface ExploreProps {\n  api: Api;\n  posts: Array<Post>;\n  getPosts(sortBy: SortBy, offset: number | null, limit: number | null): void;\n  setInherit(inherit: boolean): void;\n}\n\nexport function Explore(props: ExploreProps) {\n  const [sortMethod, setSortMethod] = useState<SortBy>(SortBy.MOST_RECENT);\n  const [offset, setOffset] = useState<number>(0);\n  // Setting the limit per screen to 3\n  const [limit, setLimit] = useState<number>(3);\n\n  useEffect(() => {\n    props.getPosts(sortMethod, null, null);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sortMethod]);\n\n  function renderPosts(posts: Array<Post> | null): React.ReactNode {\n    if (posts === null || posts.length === 0) {\n      return;\n    }\n\n    function onSortMethodClick({ key }: MenuInfo) {\n      if (key === SortBy.MOST_RECENT) {\n        props.setInherit(false);\n        setSortMethod(SortBy.MOST_RECENT);\n      } else {\n        props.setInherit(true);\n        setSortMethod(SortBy.BY_USERS);\n      }\n    }\n\n    function onNextPage(pageNumber: number, pageSize: number | undefined) {\n      const actualPageSize = pageSize ? pageSize : 3;\n      setOffset((pageNumber - 1) * actualPageSize);\n      setLimit(actualPageSize);\n    }\n\n    const dropdownMenu = (\n      <Menu onClick={onSortMethodClick}>\n        <Menu.Item key={SortBy.MOST_RECENT}>Most Recent</Menu.Item>\n        <Menu.Item key={SortBy.BY_USERS}>By User</Menu.Item>\n      </Menu>\n    );\n\n    // If the user decides to sort by most recently uploaded, we paginate to improve performance\n    return (\n      <>\n        <Dropdown overlay={dropdownMenu} trigger={[\"click\"]}>\n          <Button type=\"text\">\n            Sort By <DownOutlined />\n          </Button>\n        </Dropdown>\n        {sortMethod === SortBy.MOST_RECENT ? (\n          <>\n            <Feed posts={posts.slice(offset, offset!! + limit!!)} />\n            <Pagination\n              style={{ marginTop: \"12px\", marginBottom: \"12px\" }}\n              onChange={onNextPage}\n              defaultCurrent={1}\n              total={posts.length}\n              pageSize={limit}\n            />\n          </>\n        ) : (\n          <ExploreByUsers api={props.api} posts={posts} />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"spaced\">\n      <h1 className=\"bordered\" style={{ marginBottom: 0 }}>\n        Explore\n      </h1>\n      {renderPosts(props.posts)}\n    </div>\n  );\n}\n","export default class HttpClient {\n  constructor(authToken: string) {\n    this._authToken = authToken;\n  }\n\n  setAuthToken(authToken: string) {\n    this._authToken = authToken;\n  }\n\n  async doPostFormData(path: string, formData: FormData) {\n    return this.doFetch(path, {\n      method: \"POST\",\n      body: formData,\n    });\n  }\n\n  async doPostJson(path: string, body: Object) {\n    return this.doFetch(path, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n      body: JSON.stringify(body),\n    });\n  }\n\n  async doGet(path: string, queryParams: QueryParams | null) {\n    const pathAndQuery =\n      queryParams === null\n        ? path\n        : path + \"?\" + this.encodeQueryParams(queryParams);\n\n    return this.doFetch(pathAndQuery, {\n      headers: {\n        Authorization: this._authToken,\n      },\n    });\n  }\n\n  private encodeQueryParams(queryParams: QueryParams): string {\n    return Object.keys(queryParams)\n      .map(\n        (k) =>\n          `${encodeURIComponent(k)}=${encodeURIComponent(queryParams[k]!!)}`\n      )\n      .join(\"&\");\n  }\n\n  private async doFetch(url: string, init: RequestInit): Promise<Response> {\n    let { headers, ...rest } = init;\n    let finalHeaders = { ...headers };\n\n    if (this._authToken) {\n      finalHeaders = { ...headers, Authorization: `Bearer ${this._authToken}` };\n    }\n\n    let response: Response;\n    try {\n      response = await fetch(\"/api\" + url, { ...rest, headers: finalHeaders });\n    } catch (e) {\n      throw e;\n    }\n\n    if (response.status === 400) {\n      throw new BadRequestError();\n    } else if (response.status === 401) {\n      throw new UnauthorizedError();\n    } else if (response.status === 404) {\n      throw new NotFoundError();\n    } else if (response.status === 409) {\n      throw new ConflictError();\n    } else if (response.status === 500) {\n      throw new InternalServerError();\n    }\n\n    return response;\n  }\n\n  private _authToken: string;\n}\n\nexport interface QueryParams {\n  [key: string]: string;\n}\n\nexport class BadRequestError extends Error {}\nexport class ConflictError extends Error {}\nexport class UnauthorizedError extends Error {}\nexport class NotFoundError extends Error {}\nexport class InternalServerError extends Error {}\n","import HttpClient, {\n  ConflictError,\n  InternalServerError,\n  QueryParams,\n  UnauthorizedError,\n} from \"./client\";\nimport { AuthToken, Post, User } from \"../models\";\nimport { SortBy } from \"../components/explore\";\n\nexport interface Api {\n  login(email: string, password: string): Promise<AuthToken>;\n  signup(email: string, username: string, password: string): Promise<AuthToken>;\n  logout(): Promise<void>;\n  getPosts(\n    sortBy: SortBy,\n    offset: number | null,\n    limit: number | null\n  ): Promise<Array<Post>>;\n  newPost(file: File | Blob, text: string): Promise<Post>;\n  getAllUsers(): Promise<Array<User>>;\n  getUser(publicId: string): Promise<User>;\n  getPostsByUser(userPublicId: string): Promise<Array<Post>>;\n}\n\nexport class ApiImpl implements Api {\n  constructor(client: HttpClient) {\n    this._client = client;\n  }\n\n  setClient(client: HttpClient) {\n    this._client = client;\n  }\n\n  async getAllUsers(): Promise<Array<User>> {\n    const path = `/v1/user`;\n    let result: Response;\n\n    try {\n      result = await this._client.doGet(path, null);\n    } catch (e) {\n      throw e;\n    }\n\n    return result.json()!!;\n  }\n\n  async getPostsByUser(userPublicId: string): Promise<Array<Post>> {\n    const path = `/v1/post/${userPublicId}`;\n    let result: Response;\n\n    try {\n      result = await this._client.doGet(path, null);\n    } catch (e) {\n      throw e;\n    }\n\n    return result.json()!!;\n  }\n\n  async getUser(userPublicId: string): Promise<User> {\n    const path = `/v1/user/${userPublicId}`;\n    let result: Response;\n\n    try {\n      result = await this._client.doGet(path, null);\n    } catch (e) {\n      throw e;\n    }\n    return result.json()!!;\n  }\n\n  async logout(): Promise<void> {\n    const path = \"/v1/auth/logout\";\n\n    try {\n      await this._client.doPostJson(path, {});\n    } catch (e) {\n      throw e;\n    }\n    return;\n  }\n\n  async newPost(file: File | Blob, text: string): Promise<Post> {\n    const path = \"/v1/post\";\n    let result: Response;\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"text\", text);\n    try {\n      result = await this._client.doPostFormData(path, formData);\n    } catch (e) {\n      throw e;\n    }\n    return result.json()!!;\n  }\n\n  async login(email: string, password: string): Promise<AuthToken> {\n    const url = \"/v1/auth/login\";\n    let result: Response;\n    try {\n      result = await this._client.doPostJson(url, {\n        email: email,\n        password: password,\n      });\n      return result.json()!!;\n    } catch (e) {\n      if (e instanceof UnauthorizedError) {\n        throw new LoginFailedError();\n      }\n      if (e instanceof InternalServerError) {\n        throw new DownstreamError();\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  async signup(\n    email: string,\n    username: string,\n    password: string\n  ): Promise<AuthToken> {\n    const url = \"/v1/user\";\n    let result: Response;\n    try {\n      result = await this._client.doPostJson(url, {\n        email: email,\n        username: username,\n        password: password,\n      });\n      return result.json()!!;\n    } catch (e) {\n      if (e instanceof ConflictError) {\n        throw new UserAlreadyExistsError();\n      } else if (e instanceof InternalServerError) {\n        throw new DownstreamError();\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  async getPosts(\n    sortBy: SortBy,\n    offset: number | null,\n    limit: number | null\n  ): Promise<Array<Post>> {\n    let result: Response;\n\n    let queryParams: QueryParams = {\n      sort_by: sortBy,\n    };\n\n    if (limit !== null && offset !== null) {\n      queryParams = {\n        sort_by: sortBy,\n        offset: String(offset),\n        limit: String(limit),\n      };\n    }\n\n    try {\n      result = await this._client.doGet(\"/v1/post\", queryParams);\n      return result.json();\n    } catch (e) {\n      if (e instanceof InternalServerError) {\n        throw new DownstreamError();\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  private _client: HttpClient;\n}\n\nexport class LoginFailedError extends Error {}\nexport class DownstreamError extends Error {}\nexport class UserAlreadyExistsError extends Error {}\n","import { Card, Image } from \"antd\";\nimport Meta from \"antd/lib/card/Meta\";\nimport React from \"react\";\nimport { Post } from \"../models\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface FeedProps {\n  posts: Array<Post>;\n}\n\n// Displays posts in a vertical fashion\nexport function Feed(props: FeedProps) {\n  return (\n    <div className=\"feed\">\n      {props.posts.map((it) => (\n        <Card className=\"card\" key={uuidv4()}>\n          <Image className=\"image\" src={it.images[0].full_src} alt=\"image\" />\n          <Meta\n            style={{ marginTop: \"16px\" }}\n            title={it.text !== undefined ? it.text : \"\"}\n          />\n        </Card>\n      ))}\n    </div>\n  );\n}\n","import { UploadOutlined } from \"@ant-design/icons\";\nimport { Button, Input, message, Modal } from \"antd\";\nimport Form, { useForm } from \"antd/lib/form/Form\";\nimport FormItem from \"antd/lib/form/FormItem\";\nimport { Store } from \"antd/lib/form/interface\";\nimport Upload, { UploadChangeParam } from \"antd/lib/upload\";\nimport { UploadFile } from \"antd/lib/upload/interface\";\nimport React, { useState } from \"react\";\nimport { Api } from \"../api\";\nimport { SortBy } from \"./explore\";\n\ninterface NewPostProps {\n  api: Api;\n  visible: boolean;\n  hideModal(): void;\n  getPosts(sortBy: SortBy, offset: number | null, limit: number | null): void;\n}\n\nexport function NewPostModal(props: NewPostProps) {\n  const [fileList, setFileList] = useState<Array<UploadFile>>([]);\n  const [confirmLoading, setConfirmLoading] = useState<boolean>(false);\n  const [form] = useForm();\n\n  function onSubmit() {\n    form.validateFields().then(async (values: Store) => {\n      const fileContainer: UploadChangeParam = values.file;\n      // We currently allow the customer to create a post without text, in this case\n      // default to an empty string\n      const text: string = values.text;\n      setConfirmLoading(true);\n      try {\n        await props.api.newPost(\n          fileContainer.file.originFileObj!!,\n          text ? text : \"\"\n        );\n      } catch (e) {}\n      setConfirmLoading(false);\n      props.hideModal();\n      // Upon successful upload, refresh the feed to show the most recently uploaded post\n      try {\n        await props.getPosts(SortBy.MOST_RECENT, null, null);\n      } catch (e) {}\n    });\n  }\n\n  // We only support uploading one picture per post at this time\n  function onChange(info: UploadChangeParam) {\n    let newFileList: Array<UploadFile> = [];\n    switch (info.file.status) {\n      case \"uploading\":\n        newFileList = [info.file];\n        break;\n      case \"done\":\n        newFileList = [info.file];\n        break;\n      default:\n        newFileList = [];\n    }\n    setFileList(newFileList);\n  }\n\n  // This function is required for the form component to not upload until submission confirmation\n  function dummyRequest({ onSuccess }: any) {\n    setTimeout(() => {\n      onSuccess(\"ok\");\n    }, 0);\n  }\n\n  function validateFiletype(file: UploadFile) {\n    const acceptedFileTypes = [\n      \"image/png\",\n      \"image/jpg\",\n      \"image/jpeg\",\n      \"image/gif\",\n    ];\n\n    if (!acceptedFileTypes.includes(file.type)) {\n      message.error(`${file.name} is not in a file format that we support`);\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  return (\n    <Modal\n      title=\"New Post\"\n      visible={props.visible}\n      onCancel={props.hideModal}\n      okText=\"Submit\"\n      okButtonProps={{ disabled: fileList.length === 0 }}\n      onOk={onSubmit}\n      confirmLoading={confirmLoading}\n      destroyOnClose\n    >\n      <Form form={form} preserve={false} name=\"validate_other\">\n        <FormItem\n          name=\"file\"\n          label=\"Image\"\n          extra=\"Please upload a .png, .jpg, .jpeg, or .gif image\"\n        >\n          <Upload\n            customRequest={dummyRequest}\n            onChange={onChange}\n            fileList={fileList}\n            name=\"logo\"\n            listType=\"picture\"\n            beforeUpload={validateFiletype}\n          >\n            <Button icon={<UploadOutlined />}>Click to upload</Button>\n          </Upload>\n        </FormItem>\n        <FormItem name=\"text\" label=\"Subtitle\">\n          <Input required />\n        </FormItem>\n      </Form>\n    </Modal>\n  );\n}\n","import { Card, Image } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { SingleUserFeed } from \".\";\nimport { Api } from \"../api\";\nimport { Post, User } from \"../models\";\n\ninterface ExploreByUsersProps {\n  api: Api;\n  posts: Array<Post>;\n}\n\n// This component currently takes the posts from props and displays them\n// We could build a more robust but more bandwidth-intensive experience by fetching posts\n// per user upon click, but in this early stage, fetching all posts is still a low latency operation\nexport function ExploreByUsers(props: ExploreByUsersProps) {\n  const [users, setUsers] = useState<Array<User>>([]);\n\n  useEffect(() => {\n    (async () => {\n      const response = await props.api.getAllUsers();\n      setUsers(response);\n    })();\n  }, [props.api, props.posts]);\n\n  const posts = props.posts.sort(sort);\n\n  // It makes the most sense when viewing a single user's photos for the most recent ones to come first,\n  // this helper method helps us parse sql timestamps into Javascript Date() objects\n  function sort(first: Post, second: Post) {\n    var t1 = first.created_on.split(/[- :]/).map((it) => {\n      return Number(it);\n    });\n    var t2 = second.created_on.split(/[- :]/).map((it) => {\n      return Number(it);\n    });\n\n    var d1 = new Date(Date.UTC(t1[0], t1[1] - 1, t1[2], t1[3], t1[4], t1[5]));\n    var d2 = new Date(Date.UTC(t2[0], t2[1] - 1, t2[2], t2[3], t2[4], t2[5]));\n    if (d1 < d2) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n\n  return (\n    <div className=\"rowFeed\">\n      {users.map((user, index) => {\n        const usersPosts = posts.filter((post) => {\n          return post.user_public_id === user.public_id;\n        });\n        const possibleThumbnail = usersPosts[0]?.images[0]?.full_src;\n        return (\n          <Card className=\"rowCard\" key={index}>\n            <Image\n              className=\"image\"\n              src={\n                possibleThumbnail\n                  ? possibleThumbnail\n                  : \"http://i2.wp.com/juju.com.hk/wp-content/uploads/2019/11/placeholder.png\"\n              }\n              alt=\"image\"\n            />\n            <SingleUserFeed username={user.username} posts={usersPosts} />\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","import { ExpandAltOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport React, { useState } from \"react\";\nimport { Feed } from \".\";\nimport { Post } from \"../models\";\n\ninterface SingleUserFeed {\n  username: string;\n  posts: Array<Post>;\n}\n\n// This component displays a single user's posts in a modal sorted by recency\nexport function SingleUserFeed(props: SingleUserFeed) {\n  const [showModal, setShowModal] = useState<boolean>(false);\n\n  function _showModal() {\n    setShowModal(true);\n  }\n\n  function hideModal() {\n    setShowModal(false);\n  }\n\n  function okButton() {\n    return (\n      <Button type=\"primary\" onClick={hideModal}>\n        Close\n      </Button>\n    );\n  }\n\n  return (\n    <>\n      <Button style={{ marginTop: \"10px\" }} type=\"link\" onClick={_showModal}>\n        {props.username}\n        <ExpandAltOutlined />\n      </Button>\n      <Modal\n        footer={okButton()}\n        visible={showModal}\n        onOk={hideModal}\n        onCancel={hideModal}\n      >\n        {props.posts.length !== 0 ? (\n          <Feed posts={props.posts} />\n        ) : (\n          <div>This user hasn't uploaded any photos yet!</div>\n        )}\n      </Modal>\n    </>\n  );\n}\n","import { message, Input } from \"antd\";\nimport Form from \"antd/lib/form/Form\";\nimport React from \"react\";\nimport FormItem from \"antd/lib/form/FormItem\";\nimport { Cookies } from \"react-cookie\";\nimport { Api, LoginFailedError, DownstreamError } from \"../api\";\nimport { AuthToken } from \"../models\";\n\ninterface LoginProps {\n  api: Api;\n  setAuthToken(authToken: string): void;\n}\n\nexport function Login(props: LoginProps) {\n  async function onSubmit({ email, password }: any) {\n    let response: AuthToken;\n    try {\n      response = await props.api.login(email, password);\n\n      // If the response is successful, set a cookie containing the auth token on the browser that is valid for 15 minutes\n      const cookies = new Cookies();\n      const d1 = new Date();\n      const d2 = new Date();\n      d2.setMinutes(d1.getMinutes() + 15);\n      cookies.set(\"instapic_jwt\", response.authorization, { expires: d2 });\n      props.setAuthToken(response.authorization);\n    } catch (e) {\n      if (e instanceof LoginFailedError) {\n        message.error(\n          \"Login unsuccessful, check your email and password. Did you mean to sign up?\"\n        );\n      } else if (e instanceof DownstreamError) {\n        message.error(\n          \"Our systems seem to be experiencing issues, please try again later\"\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return (\n    <div className=\"authForm\">\n      <div className=\"float shadowed\">\n        <h2>Log In</h2>\n        <Form onFinish={onSubmit}>\n          <FormItem\n            required\n            label=\"Email\"\n            name=\"email\"\n            rules={[\n              { required: true, message: \"Please enter an email\" },\n              { type: \"email\" },\n            ]}\n          >\n            <Input />\n          </FormItem>\n          <FormItem\n            required\n            label=\"Password\"\n            name=\"password\"\n            rules={[{ required: true, message: \"Please enter a password\" }]}\n          >\n            <Input.Password />\n          </FormItem>\n          <button>Log In</button>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","import { message, Input } from \"antd\";\nimport Form from \"antd/lib/form/Form\";\nimport FormItem from \"antd/lib/form/FormItem\";\nimport React from \"react\";\nimport { Api, DownstreamError, UserAlreadyExistsError } from \"../api\";\nimport { AuthToken } from \"../models\";\n\ninterface SignupProps {\n  api: Api;\n  setAuthToken(authToken: string): void;\n}\n\nexport function Signup(props: SignupProps) {\n  async function onSubmit({ email, username, password }: any) {\n    let response: AuthToken;\n    try {\n      response = await props.api.signup(email, username, password);\n      props.setAuthToken(response?.authorization);\n    } catch (e) {\n      if (e instanceof UserAlreadyExistsError) {\n        message.error(\n          \"That email or username already exists, did you mean to log in?\"\n        );\n      } else if (e instanceof DownstreamError) {\n        message.error(\n          \"Our systems seem to be experiencing issues, please try again later\"\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return (\n    <div className=\"authForm\">\n      <div className=\"float shadowed\">\n        <h2 className=\"spaced\">Sign Up</h2>\n        <Form onFinish={onSubmit}>\n          <FormItem\n            required\n            label=\"Email\"\n            name=\"email\"\n            rules={[\n              { required: true, message: \"Please enter an email\" },\n              { type: \"email\" },\n            ]}\n          >\n            <Input />\n          </FormItem>\n          <FormItem\n            required\n            label=\"Username\"\n            name=\"username\"\n            rules={[{ required: true, message: \"Please enter a username\" }]}\n          >\n            <Input />\n          </FormItem>\n          <FormItem\n            required\n            label=\"Password\"\n            name=\"password\"\n            rules={[\n              { required: true, message: \"Please enter a password\" },\n              {\n                min: 8,\n                message:\n                  \"Make sure your password is at least 8 characters in length\",\n              },\n            ]}\n          >\n            <Input.Password />\n          </FormItem>\n          <button>Sign Up</button>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","import { createBrowserHistory } from \"history\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Redirect, Route, Router, Switch } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { Button, message } from \"antd\";\nimport { ApiImpl, DownstreamError } from \"./api\";\nimport { Post } from \"./models\";\nimport HttpClient from \"./api/client\";\nimport { Cookies } from \"react-cookie\";\nimport \"./App.css\";\nimport { NewPostModal, Explore, Login, Signup } from \"./components\";\nimport { SortBy } from \"./components/explore\";\n\nexport default function App() {\n  const customHistory = createBrowserHistory();\n\n  return (\n    <>\n      <Router history={customHistory}>\n        <HistoryAwareApp />\n      </Router>\n    </>\n  );\n}\n\nexport function HistoryAwareApp() {\n  const [posts, setPosts] = useState<Array<Post>>([]);\n  const [visibleModal, setVisibleModal] = useState<boolean>(false);\n  const [inherit, setInherit] = useState<boolean>(false);\n\n  // On app load, attempt to automatically log in the user via auth token stored in a cookie\n  const cookies = new Cookies();\n  const cookieJWT = cookies.get(\"instapic_jwt\");\n  const [authToken, setAuthToken] = useState<string>(\n    cookieJWT ? cookieJWT : \"\"\n  );\n  let httpClient = useRef(new HttpClient(authToken));\n  let api = useRef(new ApiImpl(httpClient.current));\n\n  useEffect(() => {\n    // This hook sets up our clients with the proper auth token\n    httpClient.current.setAuthToken(authToken);\n    api.current.setClient(httpClient.current);\n  }, [authToken]);\n\n  function showModal() {\n    setVisibleModal(true);\n  }\n\n  function hideModal() {\n    setVisibleModal(false);\n  }\n\n  async function getPosts(sortBy: SortBy, offset: number, limit: number) {\n    let posts: Array<Post>;\n    try {\n      posts = await api.current.getPosts(sortBy, offset, limit);\n      setPosts(posts);\n    } catch (e) {\n      if (e instanceof DownstreamError) {\n        message.error(\n          \"Our systems seem to be experiencing issues, please try again later\"\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  async function logout() {\n    // If the response is successful, log out the user, and delete the cookie containing the auth token\n    await api.current.logout();\n    cookies.remove(\"instapic_jwt\");\n    setAuthToken(\"\");\n  }\n\n  // If the user does not have a valid auth token, show them the login and signup screens,\n  // if they do have a valid auth token, show them the explore screen\n  return (\n    <div className=\"App\" style={inherit ? { height: \"inherit\" } : undefined}>\n      <div className=\"navBar\">\n        {!authToken && (\n          <>\n            <Link className=\"navBarButton\" to=\"/login\">\n              <Button>Log In</Button>\n            </Link>\n            <Link className=\"navBarButton\" to=\"/signup\">\n              <Button>Signup</Button>\n            </Link>\n          </>\n        )}\n        {authToken && (\n          <>\n            <Link className=\"navBarButton\" to=\"/explore\">\n              <Button>Explore</Button>\n            </Link>\n            <Link className=\"navBarButton\" to=\"new_post\">\n              <Button onClick={showModal}>New Post</Button>\n              <NewPostModal\n                getPosts={getPosts}\n                hideModal={hideModal}\n                visible={visibleModal}\n                api={api.current}\n              />\n            </Link>\n            <Button className=\"navBarButton\" onClick={logout}>\n              Log Out\n            </Button>\n          </>\n        )}\n      </div>\n      <div className=\"body gradient\">\n        <p className=\"spaced\"></p>\n        <Switch>\n          <Route path=\"/login\">\n            {authToken ? (\n              <Redirect to=\"/\" />\n            ) : (\n              <Login api={api.current} setAuthToken={setAuthToken} />\n            )}\n          </Route>\n          <Route path=\"/signup\">\n            {authToken ? (\n              <Redirect to=\"/\" />\n            ) : (\n              <Signup api={api.current} setAuthToken={setAuthToken} />\n            )}\n          </Route>\n          <Route path=\"/explore\">\n            {!authToken ? (\n              <Redirect to=\"login\" />\n            ) : (\n              <Explore\n                setInherit={setInherit}\n                posts={posts}\n                getPosts={getPosts}\n                api={api.current}\n              />\n            )}\n          </Route>\n          <Route path=\"/\">\n            {!authToken ? (\n              <Redirect to=\"login\" />\n            ) : (\n              <Explore\n                setInherit={setInherit}\n                posts={posts}\n                getPosts={getPosts}\n                api={api.current}\n              />\n            )}\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}