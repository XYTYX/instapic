{"version":3,"sources":["App.tsx","api/client.tsx","api/index.tsx","serviceWorker.ts","index.tsx"],"names":["SortBy","HttpClient","authToken","_authToken","this","path","body","doFetch","method","headers","JSON","stringify","queryParams","pathAndQuery","encodeQueryParams","Authorization","Object","keys","map","k","encodeURIComponent","join","url","init","fetch","response","status","BadRequestError","UnauthorizedError","NotFoundError","InternalServerError","Error","ConflictError","ApiImpl","client","_client","email","password","doPost","result","json","LoginFailedError","DownstreamError","username","UserAlreadyExistsError","sortBy","sort_by","doGet","App","customHistory","createBrowserHistory","className","history","HistoryAwareApp","useState","setAuthToken","httpClient","useRef","api","current","useEffect","setClient","to","Login","Signup","Explore","props","posts","setPosts","MOST_RECENT","sortMethod","a","getPosts","console","log","it","index","key","title","text","created_on","renderPosts","setError","login","authorization","onFinish","Item","label","name","required","Password","signup","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac7ee425.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Redirect, Route, Router, Switch } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { Input, Form, Card } from \"antd\";\nimport {\n  Api,\n  ApiImpl,\n  DownstreamError,\n  LoginFailedError,\n  UserAlreadyExistsError,\n} from \"./api\";\nimport \"./App.css\";\nimport { AuthToken, Post } from \"./models\";\nimport HttpClient from \"./api/client\";\n\nexport default function App() {\n  const customHistory = createBrowserHistory();\n\n  return (\n    <div className=\"App\">\n      <Router history={customHistory}>\n        <HistoryAwareApp />\n      </Router>\n    </div>\n  );\n}\n\nfunction HistoryAwareApp() {\n  const [authToken, setAuthToken] = useState<string>(\"\");\n  let httpClient = useRef(new HttpClient(authToken));\n  let api = useRef(new ApiImpl(httpClient.current));\n\n  useEffect(() => {\n    httpClient.current.setAuthToken(authToken);\n    api.current.setClient(httpClient.current);\n  }, [authToken]);\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <ul>\n          {!authToken && (\n            <>\n              <li>\n                <Link to=\"/login\">Login</Link>\n              </li>\n              <li>\n                <Link to=\"/signup\">Signup</Link>\n              </li>\n            </>\n          )}\n          {authToken && (\n            <li>\n              <Link to=\"/explore\">Explore</Link>\n            </li>\n          )}\n        </ul>\n      </nav>\n\n      <Switch>\n        <Route path=\"/login\">\n          {authToken ? (\n            <Redirect to=\"/\" />\n          ) : (\n            <Login api={api.current} setAuthToken={setAuthToken} />\n          )}\n        </Route>\n        <Route path=\"/signup\">\n          {authToken ? (\n            <Redirect to=\"/\" />\n          ) : (\n            <Signup api={api.current} setAuthToken={setAuthToken} />\n          )}\n        </Route>\n        <Route path=\"/explore\">\n          {!authToken ? <Redirect to=\"login\" /> : <Explore api={api.current} />}\n        </Route>\n        <Route path=\"/\">\n          {!authToken ? <Redirect to=\"login\" /> : <Explore api={api.current} />}\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\ninterface ExploreProps {\n  api: Api;\n}\n\nexport enum SortBy {\n  MOST_RECENT = \"most_recent\",\n  BY_USER = \"by_user\",\n}\n\nfunction Explore(props: ExploreProps) {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [posts, setPosts] = useState<Array<Post> | null>(null);\n  const [sortMethod, setSortMethod] = useState<SortBy>(SortBy.MOST_RECENT);\n\n  useEffect(() => {\n    async function getPosts() {\n      let posts: Array<Post>;\n      posts = await props.api.getPosts(sortMethod);\n      setPosts(posts);\n    }\n    getPosts();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sortMethod]);\n\n  function renderPosts(posts: Array<Post> | null): React.ReactNode {\n    if (posts === null) {\n      return;\n    }\n\n    console.log(posts);\n\n    return (\n      <>\n        {posts.map((it, index) => (\n          <Card key={index} title={it.text}>\n            {it.created_on}\n          </Card>\n        ))}\n      </>\n    );\n  }\n\n  return (\n    <div>\n      <h2>Explore</h2>\n      {renderPosts(posts)}\n    </div>\n  );\n}\n\ninterface LoginProps {\n  api: Api;\n  setAuthToken(authToken: string): void;\n}\n\nfunction Login(props: LoginProps) {\n  const [error, setError] = useState<string>(\"\");\n\n  async function onSubmit({ email, password }: any) {\n    let response: AuthToken;\n    try {\n      response = await props.api.login(email, password);\n      props.setAuthToken(response.authorization);\n    } catch (e) {\n      switch (e) {\n        case e instanceof LoginFailedError: {\n          setError(\n            \"Login unsuccessful, check your email and password. Did you mean to sign up?\"\n          );\n          break;\n        }\n        case e instanceof DownstreamError: {\n          setError(\n            \"Our systems seem to be experiencing issues, please try again later\"\n          );\n          break;\n        }\n      }\n    }\n  }\n\n  return (\n    <div>\n      <h2>Login</h2>\n      <Form onFinish={onSubmit}>\n        <Form.Item label=\"Email\" name=\"email\">\n          <Input required />\n        </Form.Item>\n        <Form.Item label=\"Password\" name=\"password\">\n          <Input.Password required />\n        </Form.Item>\n        <button>Submit</button>\n      </Form>\n    </div>\n  );\n}\n\ninterface SignupProps {\n  api: Api;\n  setAuthToken(authToken: string): void;\n}\n\nfunction Signup(props: SignupProps) {\n  const [error, setError] = useState<string>(\"\");\n\n  async function onSubmit({ email, username, password }: any) {\n    let response: AuthToken;\n    try {\n      response = await props.api.signup(email, username, password);\n      props.setAuthToken(response?.authorization);\n    } catch (e) {\n      switch (e) {\n        case e instanceof UserAlreadyExistsError: {\n          setError(\"Email is already registered, did you mean to log in?\");\n          break;\n        }\n        default: {\n          throw e;\n        }\n      }\n    }\n  }\n\n  return (\n    <div>\n      <h2>Sign up</h2>\n      <Form onFinish={onSubmit}>\n        <Form.Item label=\"Email\" name=\"email\">\n          <Input />\n        </Form.Item>\n        <Form.Item label=\"Username\" name=\"username\">\n          <Input />\n        </Form.Item>\n        <Form.Item label=\"Password\" name=\"password\">\n          <Input.Password />\n        </Form.Item>\n        <button>Submit</button>\n      </Form>\n    </div>\n  );\n}\n","export default class HttpClient {\n  constructor(authToken: string) {\n    this._authToken = authToken;\n  }\n\n  setAuthToken(authToken: string) {\n    this._authToken = authToken;\n  }\n\n  async doPost(path: string, body: Object) {\n    return this.doFetch(path, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n      body: JSON.stringify(body),\n    });\n  }\n\n  async doGet(path: string, queryParams: QueryParams | null) {\n    const pathAndQuery =\n      queryParams === null\n        ? path\n        : path + \"?\" + this.encodeQueryParams(queryParams);\n\n    return this.doFetch(pathAndQuery, {\n      headers: {\n        Authorization: this._authToken,\n      },\n    });\n  }\n\n  private encodeQueryParams(queryParams: QueryParams): string {\n    return Object.keys(queryParams)\n      .map(\n        (k) =>\n          `${encodeURIComponent(k)}=${encodeURIComponent(queryParams[k]!!)}`\n      )\n      .join(\"&\");\n  }\n\n  private async doFetch(url: string, init: RequestInit): Promise<Response> {\n    let response: Response;\n    try {\n      response = await fetch(\"/api\" + url, init);\n    } catch (e) {\n      throw e;\n    }\n\n    if (response.status === 400) {\n      throw new BadRequestError();\n    } else if (response.status === 401) {\n      throw new UnauthorizedError();\n    } else if (response.status === 404) {\n      throw new NotFoundError();\n    } else if (response.status === 500) {\n      throw new InternalServerError();\n    }\n\n    return response;\n  }\n\n  private _authToken: string;\n}\n\ninterface QueryParams {\n  [key: string]: string;\n}\n\nclass BadRequestError extends Error {}\nexport class ConflictError extends Error {}\nexport class UnauthorizedError extends Error {}\nexport class NotFoundError extends Error {}\nexport class InternalServerError extends Error {}\n","import HttpClient, {\n  ConflictError,\n  InternalServerError,\n  UnauthorizedError,\n} from \"./client\";\nimport { AuthToken, Post } from \"../models\";\nimport { SortBy } from \"../App\";\n\nexport interface Api {\n  login(email: string, password: string): Promise<AuthToken>;\n  signup(email: string, username: string, password: string): Promise<AuthToken>;\n  getPosts(sortBy: SortBy): Promise<Array<Post>>;\n}\n\nexport class ApiImpl implements Api {\n  constructor(client: HttpClient) {\n    this._client = client;\n  }\n\n  setClient(client: HttpClient) {\n    this._client = client;\n  }\n\n  async login(email: string, password: string): Promise<AuthToken> {\n    const url = \"/v1/auth/login\";\n    let result: Response;\n    try {\n      result = await this._client.doPost(url, {\n        email: email,\n        password: password,\n      });\n      return result.json()!!;\n    } catch (e) {\n      switch (e) {\n        case e instanceof UnauthorizedError: {\n          throw new LoginFailedError();\n        }\n        case e instanceof InternalServerError: {\n          throw new DownstreamError();\n        }\n        default: {\n          throw e;\n        }\n      }\n    }\n  }\n\n  async signup(\n    email: string,\n    username: string,\n    password: string\n  ): Promise<AuthToken> {\n    const url = \"/v1/user\";\n    let result: Response;\n    try {\n      result = await this._client.doPost(url, {\n        email: email,\n        username: username,\n        password: password,\n      });\n      return result.json()!!;\n    } catch (e) {\n      switch (e) {\n        case e instanceof ConflictError: {\n          throw new UserAlreadyExistsError();\n        }\n        default: {\n          throw e;\n        }\n      }\n    }\n  }\n\n  async getPosts(sortBy: SortBy): Promise<Array<Post>> {\n    let result: Response;\n\n    // Query\n    const queryParams = {\n      sort_by: sortBy,\n    };\n\n    try {\n      result = await this._client.doGet(\"/v1/post\", queryParams);\n      return result.json();\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  private _client: HttpClient;\n}\n\nexport class LoginFailedError extends Error {}\nexport class DownstreamError extends Error {}\nexport class UserAlreadyExistsError extends Error {}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}