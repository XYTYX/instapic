{"version":3,"sources":["App.tsx","api/client.tsx","api/index.tsx","serviceWorker.ts","index.tsx"],"names":["SortBy","HttpClient","authToken","_authToken","this","path","formData","doFetch","method","body","headers","JSON","stringify","queryParams","pathAndQuery","encodeQueryParams","Authorization","Object","keys","map","k","encodeURIComponent","join","url","init","rest","finalHeaders","fetch","response","status","BadRequestError","UnauthorizedError","NotFoundError","ConflictError","InternalServerError","Error","ApiImpl","client","_client","userPublicId","doGet","result","json","doPostJson","file","text","FormData","append","doPostFormData","email","password","LoginFailedError","DownstreamError","username","UserAlreadyExistsError","sortBy","sort_by","App","customHistory","createBrowserHistory","className","history","HistoryAwareApp","useState","setAuthToken","posts","setPosts","httpClient","useRef","api","current","visibleModal","setVisibleModal","getPosts","a","logout","useEffect","setClient","to","onClick","NewPost","hideModal","visible","Login","Signup","Explore","props","fileList","setFileList","confirmLoading","setConfirmLoading","useForm","form","title","onCancel","okText","okButtonProps","disabled","length","onOk","validateFields","then","values","fileContainer","newPost","originFileObj","MOST_RECENT","preserve","name","Item","label","extra","customRequest","onSuccess","setTimeout","onChange","info","newFileList","listType","beforeUpload","includes","type","message","error","icon","UploadOutlined","required","sortMethod","setSortMethod","style","marginBottom","dropdownMenu","key","BY_USERS","overlay","trigger","DownOutlined","Feed","ExploreByUsers","renderPosts","it","index","src","images","full_src","alt","marginTop","Map","users","setUsers","filteredPosts","forEach","getUser","user_public_id","user","set","public_id","seenUsers","Set","has","add","push","ViewSingleUserPosts","get","showModal","setShowModal","getPostsByUser","footer","login","authorization","onFinish","rules","Password","signup","min","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.544e1dc2.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Redirect, Route, Router, Switch } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Input,\n  Form,\n  Card,\n  Button,\n  Upload,\n  message,\n  Image,\n  Menu,\n  Dropdown,\n} from \"antd\";\nimport {\n  Api,\n  ApiImpl,\n  DownstreamError,\n  LoginFailedError,\n  UserAlreadyExistsError,\n} from \"./api\";\nimport { DownOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport { AuthToken, Post } from \"./models\";\nimport HttpClient from \"./api/client\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport { UploadChangeParam } from \"antd/lib/upload\";\nimport { UploadFile } from \"antd/lib/upload/interface\";\nimport { useForm } from \"antd/lib/form/Form\";\nimport { Store } from \"antd/lib/form/interface\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport { MenuInfo } from \"rc-menu/lib/interface\";\nimport Meta from \"antd/lib/card/Meta\";\n\nexport default function App() {\n  const customHistory = createBrowserHistory();\n\n  return (\n    <div className=\"App\">\n      <Router history={customHistory}>\n        <HistoryAwareApp />\n      </Router>\n    </div>\n  );\n}\n\nexport enum SortBy {\n  MOST_RECENT = \"most_recent\",\n  BY_USERS = \"by_users\",\n}\n\nfunction HistoryAwareApp() {\n  const [authToken, setAuthToken] = useState<string>(\"\");\n  const [posts, setPosts] = useState<Array<Post>>([]);\n  let httpClient = useRef(new HttpClient(authToken));\n  let api = useRef(new ApiImpl(httpClient.current));\n\n  const [visibleModal, setVisibleModal] = useState<boolean>(false);\n\n  function showModal() {\n    setVisibleModal(true);\n  }\n\n  function hideModal() {\n    setVisibleModal(false);\n  }\n\n  async function getPosts(sortBy: SortBy) {\n    let posts: Array<Post>;\n    posts = await api.current.getPosts(sortBy);\n    setPosts(posts);\n  }\n\n  async function logout() {\n    await api.current.logout();\n    setAuthToken(\"\");\n  }\n\n  useEffect(() => {\n    httpClient.current.setAuthToken(authToken);\n    api.current.setClient(httpClient.current);\n  }, [authToken]);\n\n  return (\n    <div className=\"App\">\n      <p className=\"spaced\"></p>\n      <nav>\n        {!authToken && (\n          <>\n            <Link to=\"/login\">\n              <Button>Log In</Button>\n            </Link>\n            <Link to=\"/signup\">\n              <Button>Signup</Button>\n            </Link>\n          </>\n        )}\n        {authToken && (\n          <>\n            <Link to=\"/explore\">\n              <Button>Explore</Button>\n            </Link>\n            <Link to=\"new_post\">\n              <Button onClick={showModal}>New Post</Button>\n              <NewPost\n                getPosts={getPosts}\n                hideModal={hideModal}\n                visible={visibleModal}\n                api={api.current}\n              />\n            </Link>\n            <Button onClick={logout}>Log Out</Button>\n          </>\n        )}\n      </nav>\n      <Switch>\n        <Route path=\"/login\">\n          {authToken ? (\n            <Redirect to=\"/\" />\n          ) : (\n            <Login api={api.current} setAuthToken={setAuthToken} />\n          )}\n        </Route>\n        <Route path=\"/signup\">\n          {authToken ? (\n            <Redirect to=\"/\" />\n          ) : (\n            <Signup api={api.current} setAuthToken={setAuthToken} />\n          )}\n        </Route>\n        <Route path=\"/explore\">\n          {!authToken ? (\n            <Redirect to=\"login\" />\n          ) : (\n            <Explore posts={posts} getPosts={getPosts} api={api.current} />\n          )}\n        </Route>\n        <Route path=\"/\">\n          {!authToken ? (\n            <Redirect to=\"login\" />\n          ) : (\n            <Explore posts={posts} getPosts={getPosts} api={api.current} />\n          )}\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\ninterface NewPostProps {\n  api: Api;\n  visible: boolean;\n  hideModal(): void;\n  getPosts(sortBy: SortBy): void;\n}\n\nfunction NewPost(props: NewPostProps) {\n  const [fileList, setFileList] = useState<Array<UploadFile>>([]);\n  const [confirmLoading, setConfirmLoading] = useState<boolean>(false);\n  const [form] = useForm();\n\n  function onSubmit() {\n    form.validateFields().then(async (values: Store) => {\n      const fileContainer: UploadChangeParam = values.file;\n      const text: string = values.text;\n      let result;\n      setConfirmLoading(true);\n      try {\n        result = await props.api.newPost(\n          fileContainer.file.originFileObj!!,\n          text\n        );\n      } catch (e) {}\n      setConfirmLoading(false);\n      props.hideModal();\n      try {\n        await props.getPosts(SortBy.MOST_RECENT);\n      } catch (e) {}\n    });\n  }\n\n  function onChange(info: UploadChangeParam) {\n    let newFileList: Array<UploadFile> = [];\n    switch (info.file.status) {\n      case \"uploading\":\n        newFileList = [info.file];\n        break;\n      case \"done\":\n        newFileList = [info.file];\n        break;\n      default:\n        newFileList = [];\n    }\n    setFileList(newFileList);\n  }\n\n  function dummyRequest({ onSuccess }: any) {\n    setTimeout(() => {\n      onSuccess(\"ok\");\n    }, 0);\n  }\n\n  function validateFiletype(file: UploadFile) {\n    const acceptedFileTypes = [\n      \"image/png\",\n      \"image/jpg\",\n      \"image/jpeg\",\n      \"image/gif\",\n    ];\n\n    if (!acceptedFileTypes.includes(file.type)) {\n      message.error(`${file.name} is not in a file format that we support`);\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  return (\n    <Modal\n      title=\"New Post\"\n      visible={props.visible}\n      onCancel={props.hideModal}\n      okText=\"Submit\"\n      okButtonProps={{ disabled: fileList.length === 0 }}\n      onOk={onSubmit}\n      confirmLoading={confirmLoading}\n    >\n      <Form form={form} preserve={false} name=\"validate_other\">\n        <Form.Item\n          name=\"file\"\n          label=\"Image\"\n          extra=\"Please upload a .png, .jpg, .jpeg, or .gif image\"\n        >\n          <Upload\n            customRequest={dummyRequest}\n            onChange={onChange}\n            fileList={fileList}\n            name=\"logo\"\n            listType=\"picture\"\n            beforeUpload={validateFiletype}\n          >\n            <Button icon={<UploadOutlined />}>Click to upload</Button>\n          </Upload>\n        </Form.Item>\n        <Form.Item name=\"text\" label=\"Subtitle\">\n          <Input required />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n\ninterface ExploreProps {\n  api: Api;\n  posts: Array<Post>;\n  getPosts(sortBy: SortBy): void;\n}\n\nfunction Explore(props: ExploreProps) {\n  const [posts, setPosts] = useState<Array<Post> | null>(null);\n  const [sortMethod, setSortMethod] = useState<SortBy>(SortBy.MOST_RECENT);\n\n  useEffect(() => {\n    props.getPosts(sortMethod);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sortMethod]);\n\n  function renderPosts(posts: Array<Post> | null): React.ReactNode {\n    if (posts === null || posts.length === 0) {\n      return;\n    }\n\n    function onSortMethodClick({ key }: MenuInfo) {\n      if (key === SortBy.MOST_RECENT) {\n        setSortMethod(SortBy.MOST_RECENT);\n      } else {\n        setSortMethod(SortBy.BY_USERS);\n      }\n    }\n\n    const dropdownMenu = (\n      <Menu onClick={onSortMethodClick}>\n        <Menu.Item key={SortBy.MOST_RECENT}>Most Recent</Menu.Item>\n        <Menu.Item key={SortBy.BY_USERS}>By User</Menu.Item>\n      </Menu>\n    );\n\n    return (\n      <>\n        <Dropdown overlay={dropdownMenu} trigger={[\"click\"]}>\n          <Button type=\"text\">\n            Sort By <DownOutlined />\n          </Button>\n        </Dropdown>\n        {sortMethod === SortBy.MOST_RECENT ? (\n          <Feed posts={posts} />\n        ) : (\n          <ExploreByUsers api={props.api} posts={posts} />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"spaced\">\n      <h2 style={{ marginBottom: 0 }}>Explore</h2>\n      {renderPosts(props.posts)}\n    </div>\n  );\n}\n\ninterface FeedProps {\n  posts: Array<Post>;\n}\n\nfunction Feed(props: FeedProps) {\n  return (\n    <div className=\"feed\">\n      {props.posts.map((it, index) => (\n        <div className=\"outerCard\" key={index}>\n          <Card className=\"card\">\n            <Image className=\"image\" src={it.images[0].full_src} alt=\"image\" />\n            <Meta\n              style={{ marginTop: \"16px\" }}\n              title={it.text ? it.text : \"\"}\n            />\n          </Card>\n        </div>\n      ))}\n    </div>\n  );\n}\n\ninterface ExploreByUsersProps {\n  api: Api;\n  posts: Array<Post>;\n}\n\nfunction ExploreByUsers(props: ExploreByUsersProps) {\n  const [users, setUsers] = useState<Map<string, string>>(new Map());\n  const filteredPosts: Array<Post> = [];\n\n  useEffect(() => {\n    props.posts.forEach(async (it) => {\n      const user = await props.api.getUser(it.user_public_id);\n      setUsers(users.set(user.public_id, user.username));\n    });\n  }, [props.api, props.posts, users]);\n\n  const seenUsers: Set<string> = new Set();\n  props.posts.forEach((it) => {\n    if (!seenUsers.has(it.user_public_id)) {\n      seenUsers.add(it.user_public_id);\n      filteredPosts.push(it);\n    }\n  });\n\n  return (\n    <div className=\"rowFeed\">\n      {filteredPosts.map((it, index) => (\n        <Card className=\"rowCard\" key={index}>\n          <Image className=\"image\" src={it.images[0].full_src} alt=\"image\" />\n          <ViewSingleUserPosts\n            api={props.api}\n            userPublicId={it.user_public_id}\n            username={users.get(it.user_public_id)!!}\n            index={index}\n          />\n        </Card>\n      ))}\n    </div>\n  );\n}\n\ninterface ViewSingleUserPostsProps {\n  api: Api;\n  userPublicId: string;\n  username: string;\n  index: number;\n}\n\nfunction ViewSingleUserPosts(props: ViewSingleUserPostsProps) {\n  const [showModal, setShowModal] = useState<boolean>(false);\n  const [posts, setPosts] = useState<Array<Post>>([]);\n\n  useEffect(() => {\n    async function getPostsByUser() {\n      const posts = await props.api.getPostsByUser(props.userPublicId);\n      setPosts(posts);\n    }\n    getPostsByUser();\n  }, [props.api, props.userPublicId, showModal]);\n\n  function _showModal() {\n    setShowModal(true);\n  }\n\n  function hideModal() {\n    setShowModal(false);\n  }\n\n  function okButton() {\n    return (\n      <Button type=\"primary\" onClick={hideModal}>\n        Close\n      </Button>\n    );\n  }\n\n  return (\n    <>\n      <Button style={{ marginTop: \"10px\" }} type=\"link\" onClick={_showModal}>\n        {props.username}\n      </Button>\n      <Modal\n        footer={okButton()}\n        visible={showModal}\n        onOk={hideModal}\n        onCancel={hideModal}\n      >\n        <Feed posts={posts} />\n      </Modal>\n    </>\n  );\n}\n\ninterface LoginProps {\n  api: Api;\n  setAuthToken(authToken: string): void;\n}\n\nfunction Login(props: LoginProps) {\n  const [error, setError] = useState<string>(\"\");\n\n  async function onSubmit({ email, password }: any) {\n    let response: AuthToken;\n    try {\n      response = await props.api.login(email, password);\n      props.setAuthToken(response.authorization);\n    } catch (e) {\n      if (e instanceof LoginFailedError) {\n        message.error(\n          \"Login unsuccessful, check your email and password. Did you mean to sign up?\"\n        );\n      } else if (e instanceof DownstreamError) {\n        message.error(\n          \"Our systems seem to be experiencing issues, please try again later\"\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return (\n    <div className=\"authForm\">\n      <h2 className=\"spaced\">Log In</h2>\n      <Form onFinish={onSubmit}>\n        <Form.Item\n          required\n          label=\"Email\"\n          name=\"email\"\n          rules={[\n            { required: true, message: \"Please enter an email\" },\n            { type: \"email\" },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          required\n          label=\"Password\"\n          name=\"password\"\n          rules={[{ required: true, message: \"Please enter a password\" }]}\n        >\n          <Input.Password />\n        </Form.Item>\n        <button>Log In</button>\n      </Form>\n    </div>\n  );\n}\n\ninterface SignupProps {\n  api: Api;\n  setAuthToken(authToken: string): void;\n}\n\nfunction Signup(props: SignupProps) {\n  async function onSubmit({ email, username, password }: any) {\n    let response: AuthToken;\n    try {\n      response = await props.api.signup(email, username, password);\n      props.setAuthToken(response?.authorization);\n    } catch (e) {\n      if (e instanceof UserAlreadyExistsError) {\n        message.error(\n          \"That email or username already exists, did you mean to log in?\"\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return (\n    <div className=\"authForm\">\n      <h2 className=\"spaced\">Sign Up</h2>\n      <Form onFinish={onSubmit}>\n        <Form.Item\n          required\n          label=\"Email\"\n          name=\"email\"\n          rules={[\n            { required: true, message: \"Please enter an email\" },\n            { type: \"email\" },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          required\n          label=\"Username\"\n          name=\"username\"\n          rules={[{ required: true, message: \"Please enter a username\" }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          required\n          label=\"Password\"\n          name=\"password\"\n          rules={[\n            { required: true, message: \"Please enter a password\" },\n            {\n              min: 8,\n              message:\n                \"Make sure your password is at least 8 characters in length\",\n            },\n          ]}\n        >\n          <Input.Password />\n        </Form.Item>\n        <button>Sign Up</button>\n      </Form>\n    </div>\n  );\n}\n","export default class HttpClient {\n  constructor(authToken: string) {\n    this._authToken = authToken;\n  }\n\n  setAuthToken(authToken: string) {\n    this._authToken = authToken;\n  }\n\n  async doPostFormData(path: string, formData: FormData) {\n    return this.doFetch(path, {\n      method: \"POST\",\n      body: formData,\n    });\n  }\n\n  async doPostJson(path: string, body: Object) {\n    return this.doFetch(path, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n      body: JSON.stringify(body),\n    });\n  }\n\n  async doGet(path: string, queryParams: QueryParams | null) {\n    const pathAndQuery =\n      queryParams === null\n        ? path\n        : path + \"?\" + this.encodeQueryParams(queryParams);\n\n    return this.doFetch(pathAndQuery, {\n      headers: {\n        Authorization: this._authToken,\n      },\n    });\n  }\n\n  private encodeQueryParams(queryParams: QueryParams): string {\n    return Object.keys(queryParams)\n      .map(\n        (k) =>\n          `${encodeURIComponent(k)}=${encodeURIComponent(queryParams[k]!!)}`\n      )\n      .join(\"&\");\n  }\n\n  private async doFetch(url: string, init: RequestInit): Promise<Response> {\n    let { headers, ...rest } = init;\n    let finalHeaders = { ...headers };\n\n    if (this._authToken) {\n      finalHeaders = { ...headers, Authorization: `Bearer ${this._authToken}` };\n    }\n\n    let response: Response;\n    try {\n      response = await fetch(\"/api\" + url, { ...rest, headers: finalHeaders });\n    } catch (e) {\n      throw e;\n    }\n\n    if (response.status === 400) {\n      throw new BadRequestError();\n    } else if (response.status === 401) {\n      throw new UnauthorizedError();\n    } else if (response.status === 404) {\n      throw new NotFoundError();\n    } else if (response.status === 409) {\n      throw new ConflictError();\n    } else if (response.status === 500) {\n      throw new InternalServerError();\n    }\n\n    return response;\n  }\n\n  private _authToken: string;\n}\n\ninterface QueryParams {\n  [key: string]: string;\n}\n\nexport class BadRequestError extends Error {}\nexport class ConflictError extends Error {}\nexport class UnauthorizedError extends Error {}\nexport class NotFoundError extends Error {}\nexport class InternalServerError extends Error {}\n","import HttpClient, {\n  ConflictError,\n  InternalServerError,\n  UnauthorizedError,\n} from \"./client\";\nimport { AuthToken, Post, User } from \"../models\";\nimport { SortBy } from \"../App\";\n\nexport interface Api {\n  login(email: string, password: string): Promise<AuthToken>;\n  signup(email: string, username: string, password: string): Promise<AuthToken>;\n  logout(): Promise<void>;\n  getPosts(sortBy: SortBy): Promise<Array<Post>>;\n  newPost(file: File | Blob, text: string): Promise<Post>;\n  getUser(publicId: string): Promise<User>;\n  getPostsByUser(userPublicId: string): Promise<Array<Post>>;\n}\n\nexport class ApiImpl implements Api {\n  constructor(client: HttpClient) {\n    this._client = client;\n  }\n\n  setClient(client: HttpClient) {\n    this._client = client;\n  }\n\n  async getPostsByUser(userPublicId: string): Promise<Array<Post>> {\n    const path = `/v1/post/${userPublicId}`;\n    let result: Response;\n\n    try {\n      result = await this._client.doGet(path, null);\n    } catch (e) {\n      throw e;\n    }\n\n    return result.json()!!;\n  }\n\n  async getUser(userPublicId: string): Promise<User> {\n    const path = `/v1/user/${userPublicId}`;\n    let result: Response;\n\n    try {\n      result = await this._client.doGet(path, null);\n    } catch (e) {\n      throw e;\n    }\n    return result.json()!!;\n  }\n\n  async logout(): Promise<void> {\n    const path = \"/v1/auth/logout\";\n\n    try {\n      await this._client.doPostJson(path, {});\n    } catch (e) {\n      throw e;\n    }\n    return;\n  }\n\n  async newPost(file: File | Blob, text: string): Promise<Post> {\n    const path = \"/v1/post\";\n    let result: Response;\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"text\", text);\n    try {\n      result = await this._client.doPostFormData(path, formData);\n    } catch (e) {\n      throw e;\n    }\n    return result.json()!!;\n  }\n\n  async login(email: string, password: string): Promise<AuthToken> {\n    const url = \"/v1/auth/login\";\n    let result: Response;\n    try {\n      result = await this._client.doPostJson(url, {\n        email: email,\n        password: password,\n      });\n      return result.json()!!;\n    } catch (e) {\n      if (e instanceof UnauthorizedError) {\n        throw new LoginFailedError();\n      }\n      if (e instanceof InternalServerError) {\n        throw new DownstreamError();\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  async signup(\n    email: string,\n    username: string,\n    password: string\n  ): Promise<AuthToken> {\n    const url = \"/v1/user\";\n    let result: Response;\n    try {\n      result = await this._client.doPostJson(url, {\n        email: email,\n        username: username,\n        password: password,\n      });\n      return result.json()!!;\n    } catch (e) {\n      if (e instanceof ConflictError) {\n        throw new UserAlreadyExistsError();\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  async getPosts(sortBy: SortBy): Promise<Array<Post>> {\n    let result: Response;\n\n    const queryParams = {\n      sort_by: sortBy,\n    };\n\n    try {\n      result = await this._client.doGet(\"/v1/post\", queryParams);\n      return result.json();\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  private _client: HttpClient;\n}\n\nexport class LoginFailedError extends Error {}\nexport class DownstreamError extends Error {}\nexport class UserAlreadyExistsError extends Error {}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}